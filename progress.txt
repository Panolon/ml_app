Here I write the progress of the project and ideas for further implementation.


Structure:
1. Classification
    Implemented algorithms
        1. Random Forest
        2. Support Vectors Machine
        3. KNN
        4. Naive Bayes
        5. Logistic Regression

    Metrics
        1. Precision
        2. Recall
        3. F1 score
        4. Roc auc score
        5. Classification report

    Plots
        1. Confusion Matrix
        2. Scatter plot of probabilities
        3. Precision - Recall curve
        4. ROC 
        5. Certainty histogram
            This histogram shows the differences between predicted probabilities for class 0 and class 1 in absolute values. The more closer to 1 
            the difference, the more confidence of the algorithm.


2. Clustering
    Implemented Algorithms
        1. KMeans

3. Regression

4. Dimensionality Reduction
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

___________________________________________________________________________________
Structure of models
--------------------

- Import libraries
- Constant values
- Seaborn set
- Local functions [initiate scores]

PREPROCESSING
------------------------------------------------------------------------------------
- Upload the csv file, with target value at the last column and delimiter ',' comma. If not tell the user to modify accordingly
- Make a copy of the data and start proprocessing
- Handle missing values
    - Impute missing values with mean, median, mode or a custom value
    - let the user select any row/column removal
- Select index
- Select target (last column by default is used)
- Encoding
    - label encoding : transform each str value to nominal using levels
    - One-hot encoding : create np.ones() for each level of a feature
- Feature selection : The user selects among all features, specific or 50% random
- Select if you want to standardise the data (default is yes)

-----------------------------------------------------------------------------
SPLIT DATA
-----------------------------------------------------------------------------
- train-test split  (25% is the default option)
- random state (42 as always)
-----------------------------------------------------------------------------
PARAMETER INITIALIZATION
-----------------------------------------------------------------------------
- numbers of Estimators
- max features
- bootstrap 
- oob score 
- class weight 
- criterion 

----------------------------------------
TASKS
----------------------------------------
- configure server.maxUploadSize at config.toml
